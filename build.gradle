import org.codehaus.groovy.runtime.GStringImpl

import java.text.SimpleDateFormat

buildscript {
    ext {
        gradleVersion = '8.12.1'
    }
    repositories {
        mavenLocal()
    }
}

plugins {
    id "java"
    id "idea"
}
version '0.0.1'

repositories {
    mavenLocal()
    mavenCentral()
}

compileJava { options.encoding = "UTF-8" }

dependencies {
    implementation "com.applitools:eyes-appium-java5:5.74.3"
    implementation "org.testng:testng:7.10.2"
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.42'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'jaxen:jaxen:2.0.0'
    implementation 'org.jsoup:jsoup:1.18.1'
    implementation 'org.dom4j:dom4j:2.1.4'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    testImplementation 'org.testng:testng:7.1.0'
}

static def getCurrentDatestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("MM-dd-yyyy")
    return df.format(today)
}

static def getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("HH-mm-ss")
    return df.format(today)
}

project.ext.logDir = "${rootDir}/reports/" + getCurrentDatestamp() + "/" + getCurrentTimestamp() as GStringImpl

test {
    doFirst {
        environment "APPLITOOLS_DONT_CLOSE_BATCHES", "true"
        environment "APPLITOOLS_LOG_DIR", "${project.logDir}/applitools_logs"
        environment "LOG_DIR", "${project.logDir}"
    }
    useTestNG() {
        reports {
            html.required.set(true)
            junitXml.required.set(true)
            html.outputLocation.set(file("$project.logDir/html"))
            junitXml.outputLocation.set(file("$project.logDir/junit"))
        }
        reports.junitXml.outputPerTestCase(true)
        testLogging {
            events "started", "passed", "skipped", "failed"
            // show standard out and standard error of the test JVM(s) on the console
            showStandardStreams = true
            // show full exception trace
            exceptionFormat = 'full'
            showStackTraces = true
            showCauses = true
            showExceptions = true
        }
        println("Log directory: ${project.logDir}")
        println("Debug mode: " + System.getProperty('debug', 'false'))
        // attach debugger
        if (System.getProperty('debug', 'false') == 'true') {
            println("In debug mode")
            jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,' + 'address=*:5005'
        }

    }
}

clean.doFirst {
    delete "${rootDir}/target"
    delete "${rootDir}/bin"
    delete "${rootDir}/build"
    delete "${rootDir}/out"
    println "Clean: Deleted bin, build, out, target and reports directories"
}

clean.doLast {
    mkdir "${rootDir}/reports"
    println "Created reports directory"
}

wrapper {
    gradleVersion = project.gradleVersion // version from gradle.properties
}
